!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CLI_CFLAGS	Makefile	/^CLI_CFLAGS  = $(CFLAGS)$/;"	m
CLI_FILENAME	Makefile	/^CLI_FILENAME = nvram$/;"	m
CLI_LDFLAGS	Makefile	/^CLI_LDFLAGS = $(LDFLAGS)$/;"	m
CLI_OBJ	Makefile	/^CLI_OBJ = cli.o$/;"	m
LIB_CFLAGS	Makefile	/^LIB_CFLAGS  = $(CFLAGS) -shared -fPIC$/;"	m
LIB_FILENAME	Makefile	/^LIB_FILENAME = libnvram.so$/;"	m
LIB_LDFLAGS	Makefile	/^LIB_LDFLAGS = $(LDFLAGS) -Wl,-soname,$(LIB_FILENAME).$(LIB_VERMAJOR).$(LIB_VERMINOR)$/;"	m
LIB_OBJ	Makefile	/^LIB_OBJ = crc.o nvram.o$/;"	m
LIB_VERMAJOR	Makefile	/^LIB_VERMAJOR = 0$/;"	m
LIB_VERMINOR	Makefile	/^LIB_VERMINOR = 1$/;"	m
MEM4MX16X2	sdinitvals.h	23;"	d
NVRAM_ARRAYSIZE	nvram.h	112;"	d
NVRAM_CRC_START_POSITION	nvram.h	120;"	d
NVRAM_MAGIC	nvram.h	117;"	d
NVRAM_RO	nvram.h	108;"	d
NVRAM_ROUNDUP	nvram.h	113;"	d
NVRAM_RW	nvram.h	109;"	d
NVRAM_SPACE	nvram.h	116;"	d
NVRAM_STAGING	nvram.h	107;"	d
NVRAM_VERSION	nvram.h	118;"	d
SDRAM_BURSTFULL	sdinitvals.h	26;"	d
SDRAM_CONFIG	sdinitvals.h	27;"	d
SDRAM_INIT	sdinitvals.h	25;"	d
SDRAM_REF	sdinitvals.h	19;"	d
SDRAM_REFRESH	sdinitvals.h	28;"	d
SDRAM_REF_EN	sdinitvals.h	20;"	d
TRACE	nvram.c	17;"	d	file:
_nvram_free	nvram.c	/^static void _nvram_free(nvram_handle_t *h)$/;"	f	file:
_nvram_h_	nvram.h	16;"	d
_nvram_realloc	nvram.c	/^static nvram_tuple_t * _nvram_realloc( nvram_handle_t *h, nvram_tuple_t *t,$/;"	f	file:
_nvram_rehash	nvram.c	/^static int _nvram_rehash(nvram_handle_t *h)$/;"	f	file:
_sdinitvals_h_	sdinitvals.h	16;"	d
config_ncdl	nvram.h	/^	uint32_t config_ncdl;	\/* ncdl values for memc *\/$/;"	m	struct:nvram_header
config_refresh	nvram.h	/^	uint32_t config_refresh;	\/* 0:15 sdram_config, 16:31 sdram_refresh *\/$/;"	m	struct:nvram_header
crc8_table	crc.c	/^static const uint8_t crc8_table[256] = {$/;"	v	file:
crc_ver_init	nvram.h	/^	uint32_t crc_ver_init;	\/* 0:7 crc, 8:15 ver, 16:31 sdram_init *\/$/;"	m	struct:nvram_header
do_get	cli.c	/^static int do_get(nvram_handle_t *nvram, const char *var)$/;"	f	file:
do_info	cli.c	/^static int do_info(nvram_handle_t *nvram)$/;"	f	file:
do_set	cli.c	/^static int do_set(nvram_handle_t *nvram, const char *pair)$/;"	f	file:
do_show	cli.c	/^static int do_show(nvram_handle_t *nvram)$/;"	f	file:
do_unset	cli.c	/^static int do_unset(nvram_handle_t *nvram, const char *var)$/;"	f	file:
fd	nvram.h	/^	int fd;$/;"	m	struct:nvram_handle
hash	nvram.c	/^static uint32_t hash(const char *s)$/;"	f	file:
hndcrc8	crc.c	/^uint8_t hndcrc8 ($/;"	f
len	nvram.h	/^	uint32_t len;$/;"	m	struct:nvram_header
length	nvram.h	/^	unsigned int length;$/;"	m	struct:nvram_handle
magic	nvram.h	/^	uint32_t magic;$/;"	m	struct:nvram_header
main	cli.c	/^int main( int argc, const char *argv[] )$/;"	f
mmap	nvram.h	/^	char *mmap;$/;"	m	struct:nvram_handle
name	nvram.h	/^	char *name;$/;"	m	struct:nvram_tuple
next	nvram.h	/^	struct nvram_tuple *next;$/;"	m	struct:nvram_tuple	typeref:struct:nvram_tuple::nvram_tuple
nvram_close	nvram.c	/^int nvram_close(nvram_handle_t *h)$/;"	f
nvram_commit	nvram.c	/^int nvram_commit(nvram_handle_t *h)$/;"	f
nvram_dead	nvram.h	/^	struct nvram_tuple *nvram_dead;$/;"	m	struct:nvram_handle	typeref:struct:nvram_handle::nvram_tuple
nvram_erase_size	nvram.c	/^size_t nvram_erase_size = 0;$/;"	v
nvram_find_mtd	nvram.c	/^char * nvram_find_mtd(void)$/;"	f
nvram_find_staging	nvram.c	/^char * nvram_find_staging(void)$/;"	f
nvram_get	nvram.c	/^char * nvram_get(nvram_handle_t *h, const char *name)$/;"	f
nvram_getall	nvram.c	/^nvram_tuple_t * nvram_getall(nvram_handle_t *h)$/;"	f
nvram_handle	nvram.h	/^struct nvram_handle {$/;"	s
nvram_handle_t	nvram.h	/^typedef struct nvram_handle nvram_handle_t;$/;"	t	typeref:struct:nvram_handle
nvram_hash	nvram.h	/^	struct nvram_tuple *nvram_hash[257];$/;"	m	struct:nvram_handle	typeref:struct:nvram_handle::nvram_tuple
nvram_header	nvram.c	/^nvram_header_t * nvram_header(nvram_handle_t *h)$/;"	f
nvram_header	nvram.h	/^struct nvram_header {$/;"	s
nvram_header_t	nvram.h	/^typedef struct nvram_header nvram_header_t;$/;"	t	typeref:struct:nvram_header
nvram_open	nvram.c	/^nvram_handle_t * nvram_open(const char *file, int rdonly)$/;"	f
nvram_open_rdonly	cli.c	/^static nvram_handle_t * nvram_open_rdonly(void)$/;"	f	file:
nvram_open_staging	cli.c	/^static nvram_handle_t * nvram_open_staging(void)$/;"	f	file:
nvram_safe_get	nvram.h	85;"	d
nvram_set	nvram.c	/^int nvram_set(nvram_handle_t *h, const char *name, const char *value)$/;"	f
nvram_to_staging	nvram.c	/^int nvram_to_staging(void)$/;"	f
nvram_tuple	nvram.h	/^struct nvram_tuple {$/;"	s
nvram_tuple_t	nvram.h	/^typedef struct nvram_tuple  nvram_tuple_t;$/;"	t	typeref:struct:nvram_tuple
nvram_unset	nvram.c	/^int nvram_unset(nvram_handle_t *h, const char *name)$/;"	f
offset	nvram.h	/^	unsigned int offset;$/;"	m	struct:nvram_handle
staging_to_nvram	nvram.c	/^int staging_to_nvram(void)$/;"	f
value	nvram.h	/^	char *value;$/;"	m	struct:nvram_tuple
